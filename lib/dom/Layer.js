// Generated by LiveScript 1.3.1
var chromaJs, Base, Frame, flRgba, Layer;
chromaJs = require('chroma-js');
Base = require('./Base');
Frame = require('./Frame');
flRgba = require('../helpers/color').flRgba;
module.exports = Layer = (function(superclass){
  var prototype = extend$((import$(Layer, superclass).displayName = 'Layer', Layer), superclass).prototype, constructor = Layer;
  function Layer(xml){
    var clr, fs;
    if (!(this instanceof constructor)) {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args), t;
        return (t = typeof result)  == "object" || t == "function" ? result || child : child;
  })(constructor, arguments, function(){});
    }
    clr = chromaJs(xml.attr('color'));
    fs = Frame.fillGaps(xml.$('frames/*').children.map(Frame));
    this.frames = fs;
    this.frameCount = fs.length;
    this.visible = !(xml.attr('visible') === 'false');
    this.name = xml.attr('name');
    this.locked = xml.attr('locked') === 'true';
    this.outline = xml.attr('outline') === 'true';
    this.parentLayer = xml.attr('parentLayerIndex');
    this.animationType = xml.attr('animationType') || 'none';
    this.layerType = xml.attr('layerType') || 'normal';
    this.height = (parseInt(xml.attr('heightMultiplier')) || 1) * 100;
    Object.defineProperty(this, 'color', {
      get: function(){
        return flRgba(clr);
      },
      set: function(c){
        clr = chromaJs(c);
      },
      configurable: true,
      enumerable: true
    });
  }
  Layer.mapParents = function(ls){
    var i$, len$, l, p, results$ = [];
    for (i$ = 0, len$ = ls.length; i$ < len$; ++i$) {
      l = ls[i$];
      if (l.parentLayer != null) {
        p = l.parentLayer = fn$(
        parseInt(
        l.parentLayer));
        l.layerType = (fn1$());
      }
      results$.push(l);
    }
    return results$;
    function fn$(it){
      return ls[it];
    }
    function fn1$(){
      switch (p.layerType) {
      case 'mask':
        return 'masked';
      case 'guide':
        return 'guided';
      default:
        return l.layerType;
      }
    }
  };
  return Layer;
}(Base));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}