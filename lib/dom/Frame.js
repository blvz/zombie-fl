// Generated by LiveScript 1.3.1
var Base, Element, Frame;
Base = require('./Base');
Element = require('./Element');
module.exports = Frame = (function(superclass){
  var prototype = extend$((import$(Frame, superclass).displayName = 'Frame', Frame), superclass).prototype, constructor = Frame;
  function Frame(xml){
    var es, ref$;
    if (!(this instanceof constructor)) {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args), t;
        return (t = typeof result)  == "object" || t == "function" ? result || child : child;
  })(constructor, arguments, function(){});
    }
    es = xml.$('elements/*').children;
    this.name = xml.attr('name') || '';
    this.soundName = xml.attr('soundName') || '';
    this.labelType = xml.attr('labelType') || '';
    this.duration = parseInt(xml.attr('duration')) || 1;
    this.startFrame = parseInt(xml.attr('index'));
    this.elements = es.map(Element.mapper);
    this.actionScript = ((ref$ = xml.$('Actionscript/script').children[0]) != null ? ref$.children[0].rawData.join('') : void 8) || '';
  }
  prototype.isEmpty = function(){
    return !this.elements.length;
  };
  Frame.fillGaps = function(fs){
    var i$, len$, f, j$, x$, ref$, len1$, results$ = [];
    for (i$ = 0, len$ = fs.length; i$ < len$; ++i$) {
      f = fs[i$];
      for (j$ = 0, len1$ = (ref$ = (fn$())).length; j$ < len1$; ++j$) {
        x$ = ref$[j$];
        results$.push(f);
      }
    }
    return results$;
    function fn$(){
      var i$, to$, results$ = [];
      for (i$ = 0, to$ = f.duration; i$ < to$; ++i$) {
        results$.push(i$);
      }
      return results$;
    }
  };
  return Frame;
}(Base));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}