// Generated by LiveScript 1.3.1
var fs, ref$, at, map, filter, findIndex, Base, Flash, replace$ = ''.replace;
fs = require('fs');
ref$ = require('prelude-ls'), at = ref$.at, map = ref$.map, filter = ref$.filter, findIndex = ref$.findIndex;
Base = require('./Base');
module.exports = Flash = (function(superclass){
  var currentDoc, prototype = extend$((import$(Flash, superclass).displayName = 'Flash', Flash), superclass).prototype, constructor = Flash;
  currentDoc = -1;
  prototype.documents = [];
  prototype.version = 'FAKE 0,0,1,0';
  prototype.trace = function(it){
    return console.log(it);
  };
  prototype.getDocumentDOM = function(){
    return at(currentDoc)(
    this.documents);
  };
  prototype.fileExists = function(it){
    return fs.existsSync(pathfy(it));
  };
  prototype.openDocument = function(uri){
    var path, index;
    path = pathfy(uri);
    index = findIndex(function(it){
      return it.path === path;
    })(
    this.documents);
    if (index != null) {
      currentDoc = index;
      return at(currentDoc)(
      this.documents);
    } else {
      return null;
    }
  };
  prototype.findDocumentIndex = function(name){
    var this$ = this;
    return map(function(it){
      return this$.documents.indexOf(it);
    })(
    filter(function(it){
      return it.name === name;
    })(
    this.documents));
  };
  function Flash(){
    Flash.superclass.apply(this, arguments);
  }
  return Flash;
}(Base));
function pathfy(it){
  return replace$.call(it, /^file:\/\/\//, '');
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}