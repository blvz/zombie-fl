// Generated by LiveScript 1.3.1
var chromaJs, Base, flRgba, Fill;
chromaJs = require('chroma-js');
Base = require('./Base');
flRgba = require('../helpers/color').flRgba;
module.exports = Fill = (function(superclass){
  var prototype = extend$((import$(Fill, superclass).displayName = 'Fill', Fill), superclass).prototype, constructor = Fill;
  function Fill(xml){
    var colors, that, clr;
    if (!(this instanceof constructor)) {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args), t;
        return (t = typeof result)  == "object" || t == "function" ? result || child : child;
  })(constructor, arguments, function(){});
    }
    colors = (that = xml)
      ? parseColors(that)
      : [];
    if (colors.length === 1) {
      this.style = 'solid';
      clr = chromaJs(colors[0]);
      Object.defineProperty(this, 'color', {
        get: function(){
          return flRgba(clr);
        },
        set: function(c){
          clr = chromaJs(c);
        },
        configurable: true,
        enumerable: true
      });
    } else if (colors.length) {
      this.style = xml.name.charAt(0).toLowerCase() + xml.name.substr(1);
      this.colorArray = colors.concat();
      this.overflow = xml.attr('spreadMethod') || 'extend';
      this.posArray = xml.$('GradientEntry').children.map(function(it){
        return Math.round(
        (function(it){
          return it * 255;
        })(
        parseFloat(
        it.attr('ratio'))));
      });
    } else if ((xml != null ? xml.name : void 8) === 'BitmapFill') {
      this.style = 'bitmap';
      this.bitmapPath = xml.attr('bitmapPath');
    }
  }
  prototype.style = 'noFill';
  prototype.toString = function(){
    return '[object Object]';
  };
  return Fill;
}(Base));
function parseColors(xml){
  switch (xml.name) {
  case 'SolidColor':
    return [parseColor.apply(this, arguments)];
  case 'LinearGradient':
    return parseGradient.apply(this, arguments);
  case 'RadialGradient':
    return parseGradient.apply(this, arguments);
  default:
    return [];
  }
}
function parseColor(xml){
  var clr, that;
  clr = chromaJs(xml.attr('color'));
  if (that = xml.attr('alpha')) {
    clr.alpha(parseFloat(that));
  }
  return flRgba(clr);
}
function parseGradient(xml){
  return xml.$('GradientEntry').children.map(parseColor);
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}