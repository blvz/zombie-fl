// Generated by LiveScript 1.3.1
var Base, Timeline, Document, replace$ = ''.replace;
Base = require('./Base');
Timeline = require('./Timeline');
module.exports = Document = (function(superclass){
  var prototype = extend$((import$(Document, superclass).displayName = 'Document', Document), superclass).prototype, constructor = Document;
  function Document(file, xml){
    var ts;
    if (!(this instanceof constructor)) {
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args), t;
        return (t = typeof result)  == "object" || t == "function" ? result || child : child;
  })(constructor, arguments, function(){});
    }
    this.name = replace$.call(file, /^.*\//, '');
    this.path = file;
    ts = xml.$('timelines/*').children;
    this.currentTimeline = (function(it){
      return it - 1;
    })(
    parseInt(
    xml.attr(
    'currentTimeline')));
    this.timelines = ts.map(Timeline);
  }
  prototype.getTimeline = function(){
    return this.timelines[this.currentTimeline];
  };
  return Document;
}(Base));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}